//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Manager.UserRepository {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/UserService.Models")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NickField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordSHA1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nick {
            get {
                return this.NickField;
            }
            set {
                if ((object.ReferenceEquals(this.NickField, value) != true)) {
                    this.NickField = value;
                    this.RaisePropertyChanged("Nick");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PasswordSHA1 {
            get {
                return this.PasswordSHA1Field;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordSHA1Field, value) != true)) {
                    this.PasswordSHA1Field = value;
                    this.RaisePropertyChanged("PasswordSHA1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserRepository.IUserRepository")]
    public interface IUserRepository {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/GetAllUsers", ReplyAction="http://tempuri.org/IUserRepository/GetAllUsersResponse")]
        Manager.UserRepository.User[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/GetAllUsers", ReplyAction="http://tempuri.org/IUserRepository/GetAllUsersResponse")]
        System.Threading.Tasks.Task<Manager.UserRepository.User[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/GetUser", ReplyAction="http://tempuri.org/IUserRepository/GetUserResponse")]
        Manager.UserRepository.User GetUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/GetUser", ReplyAction="http://tempuri.org/IUserRepository/GetUserResponse")]
        System.Threading.Tasks.Task<Manager.UserRepository.User> GetUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/AddUser", ReplyAction="http://tempuri.org/IUserRepository/AddUserResponse")]
        Manager.UserRepository.User AddUser(Manager.UserRepository.User u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/AddUser", ReplyAction="http://tempuri.org/IUserRepository/AddUserResponse")]
        System.Threading.Tasks.Task<Manager.UserRepository.User> AddUserAsync(Manager.UserRepository.User u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/DeleteUser", ReplyAction="http://tempuri.org/IUserRepository/DeleteUserResponse")]
        Manager.UserRepository.User DeleteUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/DeleteUser", ReplyAction="http://tempuri.org/IUserRepository/DeleteUserResponse")]
        System.Threading.Tasks.Task<Manager.UserRepository.User> DeleteUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/Dispose", ReplyAction="http://tempuri.org/IUserRepository/DisposeResponse")]
        void Dispose();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRepository/Dispose", ReplyAction="http://tempuri.org/IUserRepository/DisposeResponse")]
        System.Threading.Tasks.Task DisposeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserRepositoryChannel : Manager.UserRepository.IUserRepository, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserRepositoryClient : System.ServiceModel.ClientBase<Manager.UserRepository.IUserRepository>, Manager.UserRepository.IUserRepository {
        
        public UserRepositoryClient() {
        }
        
        public UserRepositoryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserRepositoryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserRepositoryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserRepositoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Manager.UserRepository.User[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<Manager.UserRepository.User[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public Manager.UserRepository.User GetUser(int id) {
            return base.Channel.GetUser(id);
        }
        
        public System.Threading.Tasks.Task<Manager.UserRepository.User> GetUserAsync(int id) {
            return base.Channel.GetUserAsync(id);
        }
        
        public Manager.UserRepository.User AddUser(Manager.UserRepository.User u) {
            return base.Channel.AddUser(u);
        }
        
        public System.Threading.Tasks.Task<Manager.UserRepository.User> AddUserAsync(Manager.UserRepository.User u) {
            return base.Channel.AddUserAsync(u);
        }
        
        public Manager.UserRepository.User DeleteUser(int id) {
            return base.Channel.DeleteUser(id);
        }
        
        public System.Threading.Tasks.Task<Manager.UserRepository.User> DeleteUserAsync(int id) {
            return base.Channel.DeleteUserAsync(id);
        }
        
        public void Dispose() {
            base.Channel.Dispose();
        }
        
        public System.Threading.Tasks.Task DisposeAsync() {
            return base.Channel.DisposeAsync();
        }
    }
}
